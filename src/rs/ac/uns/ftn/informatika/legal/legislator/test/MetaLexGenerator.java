package rs.ac.uns.ftn.informatika.legal.legislator.test;

import java.io.IOException;
import java.io.Writer;
import java.net.URI;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.log4j.Logger;

import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.Disposition;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.DispositionHypothesis;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.Exception;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.GeneralLegalAct;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.LegalNorm;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.LegalObject;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.LegalRelation;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.LegalSubject;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.Policy;
import rs.ac.uns.ftn.informatika.legal.legislator.model.rdf.Sanction;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Article;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Chapter;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Element;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Heading;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Index;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Item;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.LegalAct;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Meta;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Metadata;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Namespace;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Part;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Point;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Preamble;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Provision;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Section;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Signature;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Subsection;
import rs.ac.uns.ftn.informatika.legal.legislator.model.xml.Title;
import rs.ac.uns.ftn.informatika.legal.legislator.services.ServiceRegistry;
import rs.ac.uns.ftn.informatika.legal.legislator.services.query.rdf.RDFQueryService;
import rs.ac.uns.ftn.informatika.legal.legislator.services.resolver.ResolverService;

import com.clarkparsia.empire.SupportsRdfId.RdfKey;

import freemarker.template.TemplateException;

// Generator of CEN MetaLex legal acts from OWL models
public class MetaLexGenerator extends Generator {	
	
	private static Logger log = Logger.getLogger(MetaLexGenerator.class);
	
	private RDFQueryService qs = ServiceRegistry.getRDFQueryService();
	private ResolverService rs = ServiceRegistry.getResolverService();
	
	final int vacatioLegis = 8;
	final int maxRelationsRank = 3;
	final int maxArticles = 20; // TODO: Substract some constant since some article are generated by default (I guess I'll need two passes), or calculate total number of articles
	final boolean generateBasicPrinciples = true;
	
	// Mappings
	private Map<RdfKey, String> normIris = new HashMap<RdfKey, String>();
	private Map<String, String> emanatingActors = new HashMap<String, String>();
	private Map<String, String> documentTypes = new HashMap<String, String>();
	private Map<String, String> editors = new HashMap<String, String>();
	
	int relationsRank = 0;
	private long startTime;
	private LegalAct regulation = new LegalAct();
	private GeneralLegalAct legalAct = new GeneralLegalAct();
	
	// Documents IRIs
	String workIRI = null;
	String expressionIRI = null;
	String manifestationIRI = null;

	// Elements' ID counters
	private int metaId = 0;
	private int partId = 0;
	private int chapterId = 0;
	private int sectionId = 0;
	private int subsectionId = 0;
	private int articleId = 0;
	private int itemId = 0;
	private int pointId = 0;
	private int subpointId = 0;
	private int lineId = 0;
	private int provisionId = 0;
	private int simpleCitationId = 0;
	
	public MetaLexGenerator(String outputPath, String templateName, String templateDir, String outputFileName, boolean overwrite, String filePackage)  {
		super(outputPath, templateName, templateDir, outputFileName, overwrite, filePackage);	
		
		// Move mappings to ResolverService?
		emanatingActors.put("http://informatika.ftn.uns.ac.rs/legal/privacy.owl#ParliamentOfSerbia", "narodna-skupstina");
		emanatingActors.put("http://informatika.ftn.uns.ac.rs/legal/privacy.owl#Commissioner", "poverenik-informacije-javnog-znacaja-zastitu-podataka-licnosti");
		
		documentTypes.put("Закон", "zakon");
		documentTypes.put("Правилник", "pravilnik");
		documentTypes.put("Устав", "ustav");
		
		editors.put("http://informatika.ftn.uns.ac.rs/legal/privacy.owl#35/09", "sluzbeni-glasnik");
		editors.put("http://informatika.ftn.uns.ac.rs/legal/privacy.owl#97/08", "sluzbeni-glasnik");
		editors.put("http://informatika.ftn.uns.ac.rs/legal/privacy.owl#98/06", "sluzbeni-glasnik");
	}
	
	/*
	 
	*/
	public static void main(String args[]) {
		MetaLexGenerator generator = new MetaLexGenerator("generated", "regulation", "templates", "regulation.xml", true, "");
		generator.compose();
		generator.write();
	}

	/*
	 
	*/
	private void compose() {
		// Initialize empire
		startTime = System.nanoTime();
		legalAct = qs.getGeneralLegalAct("http://informatika.ftn.uns.ac.rs/legal/privacy.owl#PrivacyLaw");
		System.out.println("Retrieved legal act: " + (System.nanoTime() - startTime) / 1000000000);
		
		// Calculate relations' rank
		calculateRank();
		System.out.println("Calculated rank: " + (System.nanoTime() - startTime) / 1000000000);
		
		iri();
		System.out.println("Generated IRIs: " + (System.nanoTime() - startTime) / 1000000000);
		
		regulation();
		System.out.println("Generated regulation: " + (System.nanoTime() - startTime) / 1000000000);
		
		metadata();
		System.out.println("Generated metadata: " + (System.nanoTime() - startTime) / 1000000000);
		
		preamble();
		System.out.println("Generated preamble: " + (System.nanoTime() - startTime) / 1000000000);
		
		title();
		System.out.println("Generated title: " + (System.nanoTime() - startTime) / 1000000000);
		
		introduction();
		System.out.println("Generated introductory provisions: " + (System.nanoTime() - startTime) / 1000000000);
		
		normative();
		System.out.println("Generated normative provisions: " + (System.nanoTime() - startTime) / 1000000000);
		
		competences();
		System.out.println("Generated competences: " + (System.nanoTime() - startTime) / 1000000000);
		
		penal();
		System.out.println("Generated penal provisions: " + (System.nanoTime() - startTime) / 1000000000);
		
		transitional();
		System.out.println("Generated transitional provisions: " + (System.nanoTime() - startTime) / 1000000000);
		
		closing();
		System.out.println("Generated closing provisions: " + (System.nanoTime() - startTime) / 1000000000);
		
		attachments();
		System.out.println("Generated attachments: " + (System.nanoTime() - startTime) / 1000000000);
	}
	
	/*
	 
	*/
	private void write() {
		//printElements(regulation, 0);
		
		try {
			super.generate();
		} catch (IOException e) {		
			log.error(e.getMessage());
		}
		
		Writer out;
		Map<String, Object> context = new HashMap<String, Object>();
		try {
			out = getWriter("privacy.xml", "");
			if (out != null) {
				context.clear();
				context.put("act", regulation);
				getTemplate().process(context, out);
				out.flush();
			}
		} catch (TemplateException e) {	
			log.error(e.getMessage());
		} catch (IOException e) {
			log.error(e.getMessage());
		}	
	}	

	
	/*
	 
	*/
	private void calculateRank() {
		if (qs.getSortedRootLegalRelations(legalAct).size() < maxArticles) {
			relationsRank = 0;
		} else {
			relationsRank = qs.getRootLegalRelationsRank(legalAct);
			if (relationsRank >= maxRelationsRank) {
				relationsRank = maxRelationsRank;
			}
		}
	}
	
	/*
	 
	*/	
	private void iri() {
		// FRBR work-level IRI
		String emanatingActor = emanatingActors.get(legalAct.getEnactedBy().getRdfId().toString());
		String documentType = documentTypes.get(legalAct.getType());
		String enactmentDate = toString(legalAct.getEnactedOn(), "yyyy-MM-dd", new Locale("en", "US"));
		int disambiguatingNumber = 1;
		workIRI = "urn:lex:rs:" + emanatingActor + ":" + documentType + ":" + enactmentDate + ":lex-" + disambiguatingNumber;
		
		// FRBR expression-level IRI
		String modificationDate = "original";
		String language = "sr";
		expressionIRI = workIRI + "@" + modificationDate + ":" + language;
		
		// FRBR manifestation-level IRI
		String electronicFormat = "text-xml;cen-metalex";
		String editor = editors.get(legalAct.getPublishedBy().getRdfId().toString());
		manifestationIRI = expressionIRI + "$" + electronicFormat + ":" + editor;
	}
	
	/*
	 
	*/
	private void regulation() {
		// Set namespace declarations
		Collection<Namespace> namespaces = new ArrayList<Namespace>();
		namespaces.add(new Namespace("xsi", "http://www.w3.org/2001/XMLSchema-instance"));
		namespaces.add(new Namespace("xlink", "http://www.w3.org/1999/xlink"));
		namespaces.add(new Namespace("metalex", "http://www.metalex.eu/metalex/1.0"));
		namespaces.add(new Namespace("regulation", "http://informatika.ftn.uns.ac.rs/legal/metalex/1.0/strict"));
		namespaces.add(new Namespace("", "http://informatika.ftn.uns.ac.rs/legal/metalex/1.0/strict"));
		regulation.setNamespaces(namespaces);
		
		// Set attributes
		regulation.setId("regulation");
		regulation.setLocalNamingConventionMethod("individual");
		regulation.setLocalNamingConventionScope("root");
		regulation.setType("container");
		regulation.setSubtype("root");
		regulation.setNaming("urn:metalex:sr");
		regulation.setBase(manifestationIRI);
		regulation.setGrddl("http://www.w3.org/2003/g/data-view#");
		regulation.setTransformation("RDFa2RDFXML.xsl http://ns.inria.fr/grddl/rdfa/2008/09/03/RDFa2RDFXML.xsl");
		regulation.setLang("sr");
	}
	
	/*
	 
	*/
	private void metadata() {
		Metadata metadata = createMetadata(regulation);
	
		// Explicit declaration of FRBR levels		
		Meta m1 = createMeta(metadata, expressionIRI, "metalex-owl:realizes", workIRI);
		Meta m2 = createMeta(metadata, manifestationIRI, "metalex-owl:embodies", expressionIRI);
		Meta m3 = createMeta(metadata, manifestationIRI, "metalex-owl:exemplifiedBy", "http://informatika.ftn.uns.ac.rs/metalex/main.pck");
		Meta m4 = createMeta(metadata, manifestationIRI, "owl:sameAs", "http://foo.bar");
	}
	
	/*
	 
	*/
	private void preamble() {
		// Materijalni pravni osnov
		// Formalni pravni osnov
		// Naziv pravnog subjekta koji donosi propis
		// Naziv pravnog subjekta koji daje saglasnost za donosenja propisa i saglasnost
		//if (legalAct.getType().equals("Правилник")) {
			LegalNorm creationNorm = legalAct.getLegalNorms().iterator().next().getCreationCompetence().getLegalRelation().getLegalNorms().iterator().next(); 
			URI creationDisposition = creationNorm.getDisposition().getUri().iterator().next();
			String fragment = rs.getFragmentIdFromUriReference(creationDisposition);
			URI uri = rs.getUriFromUriReference(creationDisposition);
			String[] ids = fragment.split("-");
			String art = ids[0].substring(3);
			String it = ids[1].substring(2);
			String text = "На основу <simple-citation id=\"" + (++simpleCitationId) + "\" href=\"" + uri.toString() +"#art" + art + "-it" + it + "\"> члана " + art + ". став " + it + ". " + creationNorm.getLegalAct().getLabel() + " (" + creationNorm.getLegalAct().getPublishedBy().getLabel() + ")</simple-citation> "  + creationNorm.getLegalAct().getEnactedBy().getLabel() + " доноси";
			Preamble preamble = createPreamble(regulation, text);
		//}
	}
	
	/*
	 
	*/
	private void title() {
		Title title = new Title();
		title.setId("title");
		String type = legalAct.getType();
		String institution = "заштита права на приватност"; // TODO: Legal institution that has most of the norm contained in this acts
		title.setText(type + " о " + institution);
		regulation.getElements().add(title);
	}
	
	/*
	 
	*/
	private void introduction() {
		Element container = generateBasicPrinciples ? createContainer(regulation, "Уводне одредбе", 1) : createContainer(regulation, "Основне одредбе", 1);
		
		// Predmet
		// Label of legal relation in the working set (or in the legal institution).
		Article art1 = createArticle(container, "Предмет");
		Item art1it1 = createItem(art1);
		
		// These relation should be sorted from more generic to more specific 
		StringBuffer sb = new StringBuffer("Овим прописом уређују се ");
		Collection<LegalRelation> legalRelations = qs.getSortedRootLegalRelations(legalAct); // TODO: Add level to method
		for (LegalRelation legalRelation: legalRelations) {
			sb.append(toLowerCase(legalRelation.getLabel()));
			sb.append(", ");
		}
		sb.deleteCharAt(sb.length() - 2);
		sb.append(".");
		
		Provision art1it1p1 = createProvision(art1it1, sb.toString());
		
		
		
		// Cilj (doesn't exist in drafting guidelines)
		// Labels of policies of legal norms in the working set (or in the legal institution).
		Article art2 = createArticle(container, "Циљ");
		Item art2it1 = createItem(art2);
		
		sb = new StringBuffer("Циљ овог прописа је ");
		Collection<Policy> policies = qs.getPolicies();
		for(Policy policy: policies) {
			sb.append(toLowerCase(policy.getTextualFormulation()));
			sb.append(" ");
		}
		sb.deleteCharAt(sb.length() - 1);
		sb.append(".");
		
		Provision art2it1p1 = createProvision(art2it1, sb.toString());
		
		
		
		// Definicije subjekata, objekata i odnosa
		// Labels of legal subjects, legal objects and legal relations in the working set (or in the legal institution).
		Article art3 = createArticle(container, "Значење израза");
		Item art3it1 = createItem(art3);
		Provision art3it1p1 = createProvision(art3it1, "Поједини изрази у овом пропису имају следеће значење: ");
		
		List<LegalSubject> legalSubjects = qs.getSortedRootLegalSubjects(legalAct); // TODO: Add depth level to method
		for (LegalSubject legalSubject: legalSubjects) {
			if (legalSubject.getTextualFormulation() != null) {
				Point pt = createPoint(art3it1);
				Provision p2 = createProvision(pt, pointId + ") " + legalSubject.getLabel() + " је " + legalSubject.getTextualFormulation().iterator().next() + ".");
			}
		}
		
		// Remove legal objects from the model
		Collection<LegalObject> legalObjects = qs.getLegalObjects();
		for (LegalObject legalObject: legalObjects) {
			if (legalObject.getTextualFormulation() != null) {
				Point pt = createPoint(art3it1);
				Provision p3 = createProvision(pt, pointId + ") " + legalObject.getLabel() + " је " + legalObject.getTextualFormulation().iterator().next() + ".");
			}
		}
		
		//Collection<LegalRelation> legalRelations = qs.getSortedRootLegalRelations();
		for (LegalRelation legalRelation: legalRelations) {
			if (legalRelation.getTextualFormulation() != null) {
				Point pt = createPoint(art3it1);	
				Provision p4 = createProvision(pt, pointId + ") " + legalRelation.getLabel() + " је " + legalRelation.getTextualFormulation().iterator().next() + ".");
			}
		}
		
		
				
		// Osnovna nacela
		// Textual formulation of elements of legal norms that regulate these legal relations
		// contained in the constitution
		
		if (generateBasicPrinciples) {
			LegalNorm creationNorm = legalAct.getLegalNorms().iterator().next().getCreationCompetence().getLegalRelation().getLegalNorms().iterator().next(); 
			GeneralLegalAct creationAct = creationNorm.getLegalAct();
			
			Article art4 = createArticle(container, "Основна начела");
			Collection<LegalNorm> basicPrinciples = qs.getBasicPrinciples(legalAct);
			for (LegalNorm basicPrinciple: basicPrinciples) {
				Item art4it1 = createItem(art4);
				
				sb = new StringBuffer();
				for (String text: basicPrinciple.getDisposition().getTextualFormulation()) {
					sb.append(text);
					sb.append(" ");
				}
				sb.deleteCharAt(sb.length() - 1);
				Provision art4it1p1 = createProvision(art4it1, sb.toString());
			}
		}
	}

	/*
	 
	*/
	private void normative() {
		Element container = createContainer(regulation, "Права и обавезе", 1);
		
		Collection<LegalRelation> sortedRootLegalRelations = qs.getSortedRootLegalRelations(legalAct);
		if (sortedRootLegalRelations.size() < maxArticles) {
			// Propis koji sadrzi manje od 20 clanova, po pravilu, ne sadrzi sire klasifikacione jedinice
			for (LegalRelation legalRelation: sortedRootLegalRelations) {
				createNormativeArticle(container, legalRelation, legalRelation.getLabel());
			}
		} else {
			Collection<LegalRelation> rootLegalRelations = qs.getRootLegalRelations(legalAct);
			for (LegalRelation legalRelation: rootLegalRelations) {
				normative(legalRelation, container, 2);
			}
		}
		
		// Textual formulations of dispositions and disposition hypotheses of legal norms that regulate 
		// a relation that contains a duty
		
		
		
		// Textual formulations of dispositions and disposition hypotheses of legal norms that regulate 
		// a relation that contains a competence
		
		
		
		// Odredbe procesne prirode
	}
	
	/*
	 
	*/
	private void normative(LegalRelation legalRelation, Element parent, int level) {
		Element container = createContainer(parent, legalRelation.getLabel(), level);
		Article art1 = createNormativeArticle(container, legalRelation, "");
		if (level <= maxRelationsRank) {
			Collection<LegalRelation> subrelations = qs.getSubrelations(legalRelation);
			for (LegalRelation lr: subrelations) {
				normative(lr, container, level + 1);
			}
		} else {
			Collection<LegalRelation> sortedSubrelations = qs.getSortedSubrelations(legalRelation); 
			for (LegalRelation lr: sortedSubrelations) {
				Article art2 = createNormativeArticle(container, lr, lr.getLabel());
			}
		}
	}
	
	/*
	 
	*/
	private Article createNormativeArticle(Element parent, LegalRelation legalRelation, String heading) {
		Article art1 = createArticle(parent, heading);
		StringBuffer sb = null;
		
		for (LegalNorm norm: legalRelation.getLegalNorms()) {
			if (norm.getLegalAct().equals(legalAct)) {
				Item art1it1 = createItem(art1);
				normIris.put(norm.getRdfId(), "art" + articleId + "-it"  + itemId);
				
				// Create a disposition
				sb = new StringBuffer();
				Disposition d = norm.getDisposition();
				if (d != null) {
					for (String text: d.getTextualFormulation()) {
						sb.append(text);
						sb.append(" ");
					}
					Provision art1it1p1 = createProvision(art1it1, sb.toString());
					
					// Create a disposition hypothesis
					sb = new StringBuffer();
					DispositionHypothesis dh = norm.getDispositionHypothesis();
					if (dh != null) {
						sb = new StringBuffer("ако ");
						for (String text: dh.getTextualFormulation()) {
							sb.append(text);
							sb.append(" ");
						}
						Provision art1it1p2 = createProvision(art1it1, sb.toString());		
					}
					
					// Create an exception
					sb = new StringBuffer();
					Exception ex = norm.getException();
					if (ex != null) {
						Item art1it2 = createItem(art1);
						sb = new StringBuffer("Одредбе из члана <simple-citation id=\"" + (++simpleCitationId) + "\" href=\"#art" + articleId + "-it" + (itemId - 1) + "\"> члана " + articleId + ". става " + (itemId - 1) + ".</simple-citation> неће се примењивати ако ");
						for (String text: ex.getTextualFormulation()) {
							sb.append(text);
							sb.append(" ");
						}
						Provision art1it2p1 = createProvision(art1it2, sb.toString());		
					}
				}
			}
		}
		return art1;
	}

	private void competences() {
		Element container = createContainer(regulation, "Овлашћења", 1); 
		
		Collection<LegalNorm> norms = qs.getLegislativeCreationNorms(legalAct);
		for (LegalNorm norm: norms) {
			Article art1 = createArticle(container, ""); // TODO: title
			Item art1it1 = createItem(art1);
			
			StringBuffer sb = new StringBuffer();
			for (String text: norm.getDisposition().getTextualFormulation()) {
				sb.append(text);
				sb.append(" ");
			}
			sb.deleteCharAt(sb.length() - 1);
			
			Provision art1it1p1 = createProvision(art1it1, sb.toString());
		}
	}
	
	private void penal() {
		// Textual formulations of sanctions and sanction hypotheses of legal norms
		Element container = createContainer(regulation, "Казнене одредбе", 1); 
		Article art1 = createArticle(container, "");
		
		// Legal norm that regulate relations with competences must not contain sanctions
		Collection<Sanction> sanctions = qs.getSanctions(legalAct);
		for (Sanction sanction: sanctions) {
			Item art1it1 = createItem(art1);	
			
			StringBuffer sb = new StringBuffer();
			for (String s: sanction.getTextualFormulation()) {
				sb.append(s);
				sb.append(" ");
			}
			sb.deleteCharAt(sb.length() - 1);
			sb.append(" ако поступа супротно одредбама:");
			
			Provision art1it1p1 = createProvision(art1it1, sb.toString());
			
			for (LegalNorm norm: sanction.getLegalNorms()) {
				String[] ids = normIris.get(norm.getRdfId()).split("-");
				String art = ids[0].substring(3);
				String it = ids[1].substring(2);
				Point art1it1pt1 = createPoint(art1it1);
				Provision art8it1p2 = createProvision(art1it1pt1, pointId + ") <simple-citation id=\"" + (++simpleCitationId) + "\" href=\"#art" + art + "-it" + it + "\"> члана " + art + ". става " + it + ".</simple-citation>,");
			}
		}
	}
	
	private void transitional() {
		Element container = createContainer(regulation, "Прелазне одредбе", 1); 
	}
	
	private void closing() {
		Element container = createContainer(regulation, "Завршне одредбе", 1); 
		
		// Propisi koji se stavljaju van snage
		// TODO: Sort from higher to lower, from older to newer
		Collection<LegalNorm> repealmentNorms = qs.getLegislativeRepealmentNorms(legalAct);
		for (LegalNorm repealmentNorm: repealmentNorms) {
			Article art7 = createArticle(container, "");
			Item art7it1 = createItem(art7);
			GeneralLegalAct repealedAct = repealmentNorm.getLegalRelation().getLegislativeRepealments().iterator().next().getRepealedNorms().iterator().next().getLegalAct();
			String text = "Ступањем на снагу овог прописа ставља се ван снаге " + repealedAct.getLabel() + " (" + repealedAct.getPublishedBy().getLabel() + ")."; 
			Provision art7it1p1 = createProvision(art7it1, text);
		}
		
		// Kada novi propis stupa na snagu
		Article art8 = createArticle(container, "");
		Item art8it1 = createItem(art8);
		String text = null;
		if (legalAct.getEnteredIntoForceOn() == null) {
			text = "Овај пропис ступа на снагу " + vacatioLegis + ". дана од дана објављивања."; // у \"Службеном гласнику Републике Србије\".");
		} else {
			text = "Овај пропис ступа на снагу " + toString(legalAct.getEnteredIntoForceOn(), "dd. MMMMM yyyyy.", new Locale("sr", "RS")) + " године.";
		}
		Provision art8it1p1 = createProvision(art8it1, text);
		
		
		
		// Odredbe o utvrdjivanju povratnog dejstva
		Collection<LegalNorm> retroactiveNorms = qs.getRetroactiveLegalNorms(legalAct);
		if (retroactiveNorms != null && retroactiveNorms.size() != 0) {
			Article art9 = createArticle(container, "");
			for (LegalNorm retroactiveNorm: retroactiveNorms) {
				Item art9it1 = createItem(art9);
				String[] ids = normIris.get(retroactiveNorm.getRdfId()).split("-");
				String art = ids[0].substring(3);
				String it = ids[1].substring(2);
				text = "Одредбе из " + "<simple-citation id=\"" + (++simpleCitationId) + "\" href=\"#art" + art + "-it" + it + "\"> члана " + art + ". става " + it + ".</simple-citation>" + " овог " + "закона" + " примењиваће се од " + toString(retroactiveNorm.getEfficacy(), "dd. MMMMM yyyy.", new Locale("sr", "RS")) + " године."; 
				Provision art9it1p1 = createProvision(art9it1, text);
			}
		}
		
		
		
		// datum donosenja podzakonskog propisa, broj pod kojim je zaveden kod subjekta koji ga je doneo i potpis ovlascenog lica
		// da li ovo treba da bude sadrzaj dokumenta, ili su to njegovi metapodaci
		//if (legalAct.getType().equals("Правилник")) {
			String enactmentDate = toString(legalAct.getEnactedOn(), "dd. MMMMM yyyy. године", new Locale("sr", "RS"));
			String number = legalAct.getNumber();
			String signer = legalAct.getSigner();
			Signature signature = createSignature(container, enactmentDate + " " + number + " " + signer);
		//}
	}
	
	private void attachments () {
		
	}
	
	// Utility methods
	private Metadata createMetadata(Element parent) {
		Metadata metadata = new Metadata();
		metadata.setId("metadata");
		parent.getElements().add(metadata);
			
		return metadata;
	}
	
	private Meta createMeta(Element parent, String subject, String predicate, String object) {
		metaId++;

		Meta meta = new Meta();
		meta.setId("m" + metaId);
		meta.setAbout(subject);
		meta.setRel(predicate);
		meta.setHref(object);
		parent.getElements().add(meta);
			
		return meta;
	}
	
	private Preamble createPreamble(Element parent, String text) {
		Preamble preamble = new Preamble();
		parent.getElements().add(preamble);
		Provision p = createProvision(preamble, text);
		
		return preamble;
	}
	
	private Element createContainer(Element parent, String name, int level) {
		switch (relationsRank) {
		case 0:
			return parent; 
		case 1:
			switch (level) {
			case 1: 
				return createSection(parent, name);
			default:
				return parent; 
			}
		case 2:
			switch (level) {
			case 1: 
				return createSection(parent, name);
			case 2:
				return createSubsection(parent, name);
			default:
				return parent;
			}				
		case 3:
			switch (level) {
			case 1: 
				return createChapter(parent, name);
			case 2:
				return createSection(parent, name);
			case 3:
				return createSubsection(parent, name);
			default:
				return parent;
			}
		case 4:
			switch (level) {
			case 1: 
				return createPart(parent, name);
			case 2:
				return createChapter(parent, name);
			case 3:
				return createSection(parent, name);
			case 4:
				return createSubsection(parent, name);
			default:
				return parent;
			}	
		default:
			return createSection(parent, "ERROR"); 
		} 
	}
	
	private Part createPart(Element parent, String name) {
		partId++;
		chapterId = 0;
		
		Part part = new Part();
		part.setId("part" + partId);
		
		Index index = new Index();
		index.setId("part" + partId + "-i");
		index.setText(partId + ".");
		part.getElements().add(index);
		
		Heading heading = new Heading();
		heading.setId("part" + partId + "-h");
		heading.setText(name);
		part.getElements().add(heading);
		
		parent.getElements().add(part);
		
		return part;
	}
	
	private Chapter createChapter(Element parent, String name) {
		chapterId++;
		sectionId = 0;
		
		Chapter chapter = new Chapter();
		chapter.setId("chapter" + chapterId);
		
		Index index = new Index();
		index.setId("chapter" + chapterId + "-i");
		index.setText(chapterId + ".");
		chapter.getElements().add(index);
		
		Heading heading = new Heading();
		heading.setId("chapter" + chapterId + "-h");
		heading.setText(name);
		chapter.getElements().add(heading);
		
		parent.getElements().add(chapter);
		
		return chapter;
	}
	
	private Section createSection(Element parent, String name) {
		sectionId++;
		subsectionId = 0;
		
		Section section = new Section();
		section.setId("section" + sectionId);
		
		Index index = new Index();
		index.setId("section" + sectionId + "-i");
		index.setText(sectionId + ".");
		section.getElements().add(index);
		
		Heading heading = new Heading();
		heading.setId("section" + sectionId + "-h");
		heading.setText(name);
		section.getElements().add(heading);
		
		parent.getElements().add(section);
		
		return section;
	}
	
	private Subsection createSubsection(Element parent, String name) {
		subsectionId++;
		
		Subsection subsection = new Subsection();
		subsection.setId("subsection" + subsectionId);
		
		Index index = new Index();
		index.setId("subsection" + subsectionId + "-i");
		index.setText(subsectionId + ".");
		subsection.getElements().add(index);
		
		Heading heading = new Heading();
		heading.setId("subsection" + subsectionId + "-h");
		heading.setText(name);
		subsection.getElements().add(heading);
		
		parent.getElements().add(subsection);
		
		return subsection;
	}
	
	private Article createArticle(Element parent, String name) {
		articleId++;
		itemId = 0;
		
		Article article = new Article();
		article.setId("art" + articleId);
		
		Index index = new Index();
		index.setId("art" + articleId + "-i");
		index.setText("Члан " + articleId + ".");
		article.getElements().add(index);
		
		Heading heading = new Heading();
		heading.setId("section" + articleId + "-h");
		heading.setText(name);
		article.getElements().add(heading);
		
		parent.getElements().add(article);
		
		return article;
	}
	
	private Item createItem(Element parent) {
		itemId++;
		pointId = 0;
		provisionId = 0;
		
		Item item = new Item();
		item.setId(parent.getId() + "-it" + itemId);
		parent.getElements().add(item);
		
		return item;
	}
	
	private Point createPoint(Element parent) {
		pointId++;
		subpointId = 0;
		provisionId = 0;
		
		Point point = new Point();
		point.setId(parent.getId() + "-pt" + pointId);
		parent.getElements().add(point);
		
		return point;
	}
	
	private Provision createProvision(Element parent, String text) {
		provisionId++;
		
		Provision provision = new Provision();
		provision.setId(parent.getId() + "-p" + provisionId);
		provision.setText(text);
		parent.getElements().add(provision);
		
		return provision;
	}
	
	private Signature createSignature(Element parent, String text) {
		Signature signature = new Signature();
		parent.getElements().add(signature);
		Provision p = createProvision(signature, text);
		
		return signature;
	}
	
	private String toLowerCase(String label) {
		if (label != null && label.length() > 0) {
			return label.substring(0,1).toLowerCase() + label.substring(1);
		} else {
			return null;
		}
	}
	
	private String toString(Date date, String format, Locale locale) {
		DateFormat df = new SimpleDateFormat(format, locale);
		return df.format(date);
	}
	
	private void printElements(Element root, int indentLevel) {
		for (Element element: root.getElements()) {
			for (int i = 0; i < indentLevel; i++) {
				System.out.print("\t");
			}
			System.out.println(element.getName() + ": " + element.getId());
			printElements(element, indentLevel++);
		}
	}
}